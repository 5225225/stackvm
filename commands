Whitespace is generally ignored

Every item in a program is either
    * Literal string
        Uses quotes.
        Handles escapes (\n, \xb3)

    * Literal number
        No quotes.
        Can start with either 0b (binary), 0x (hex), 0o (octal).

    * Instruction
        Uppercase, always.
        Anything that is entirely uppercase is assumed to be an instruction


Strings have escapes handled and then are pushed onto the stack.

Numbers are converted to an integer and then are pushed onto the stack.

Instructions are pushed onto the stack.

Anything unrecognised will cause the program to exit immediately.

== Limits ==

Max length of strings must be at least 255
Integers on the stack must be at least int32_t. Do not rely on this to be the case, however.

Memory addresses (GETMEM, SETMEM) must be 1 byte. Wrapping must be done.


== INSTRUCTIONS ==

ADD
    y = pop()
    x = pop()
    push(x + y)

    (Strictly speaking it doesn't matter for addition, but arguments are always "reversed".
        This is because the stack reverses them, so something like `5 3 SUB` would be -2 
        if we don't reverse the arguments)
SUB
    y = pop()
    x = pop()
    push(x - y)

MULT
    y = pop()
    x = pop()
    push(x * y)

DIV
    y = pop()
    x = pop()
    push(x / y)


RROT
    n = pop()
    Do a right rotate of the top n items

LROT
    n = pop()
    Do a left rotate of the top n items

PRINT
    x = pop()
    print(x)

GETMEM
    addr = pop()
    push(mem[addr])

    Reads from the memory array.

SETMEM
    addr = pop()
    val = pop()
    mem[addr] = val mod 256

    Writes to the memory array.


